import os
from uuid import uuid4
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from rembg import remove
from PIL import Image, ImageDraw
from dotenv import load_dotenv
import asyncio
import nest_asyncio
import io

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
BG_PATH = "backgrounds/"
TEMPLATE_PATH = "templates/"
user_states = {}  # {user_id: state}

# === –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —à–∞–±–ª–æ–Ω—ã ===
COLOR_OPTIONS = {
    "–ë–µ–ª—ã–π": (255, 255, 255),
    "–ß—ë—Ä–Ω—ã–π": (0, 0, 0),
    "–ö—Ä–∞—Å–Ω—ã–π": (255, 0, 0),
    "–ó–µ–ª—ë–Ω—ã–π": (0, 255, 0),
    "–°–∏–Ω–∏–π": (0, 0, 255)
}

TEMPLATES = {
    "–ü–µ–π–∑–∞–∂": f"{TEMPLATE_PATH}landscape.jpg",
    "–ì—Ä–∞–¥–∏–µ–Ω—Ç": f"{TEMPLATE_PATH}gradient.jpg",
    "–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è": f"{TEMPLATE_PATH}abstract.jpg"
}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def start_keyboard():
    return ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å"]], resize_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
def main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["–í—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
        ],
        resize_keyboard=True
    )

def choose_background_method_keyboard():
    return ReplyKeyboardMarkup([
        ["–®–∞–±–ª–æ–Ω", "–¶–≤–µ—Ç", "–°–≤–æ–π —Ñ–æ–Ω"],
        ["–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

def color_keyboard():
    return ReplyKeyboardMarkup(
        [[color] for color in COLOR_OPTIONS] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def template_keyboard():
    return ReplyKeyboardMarkup(
        [[template] for template in TEMPLATES] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_states[user_id] = {"mode": None}

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å —Ñ–æ—Ç–æ üñº\n–ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å!",
        reply_markup=start_keyboard()
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "–ù–∞—á–∞—Ç—å":
        await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —É–¥–∞–ª—é —Ñ–æ–Ω.\n–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω, —Ü–≤–µ—Ç –∏–ª–∏ —à–∞–±–ª–æ–Ω.",
        reply_markup=main_keyboard()
    )
        
    elif text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω:\n"
            "1. –ù–∞–∂–º–∏ '–í—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω'\n"
            "2. –í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç, —à–∞–±–ª–æ–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ\n"
            "3. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî –ø–æ–ª—É—á–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
            reply_markup=main_keyboard()
        )

    elif text == "–í—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω":
        user_states[user_id]["mode"] = "choosing_background_method"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–∞:", reply_markup=choose_background_method_keyboard())

    elif text == "–®–∞–±–ª–æ–Ω":
        user_states[user_id]["mode"] = "choosing_template"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
        for name, path in TEMPLATES.items():
            if os.path.exists(path):
                await update.message.reply_photo(
                    photo=open(path, "rb"),
                    caption=name
                )

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=template_keyboard())

    elif text == "–¶–≤–µ—Ç":
        user_states[user_id]["mode"] = "choosing_color"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞:", reply_markup=color_keyboard())

    elif text == "–°–≤–æ–π —Ñ–æ–Ω":
        user_states[user_id]["mode"] = "waiting_for_background"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-—Ñ–æ–Ω", reply_markup=main_keyboard())

    elif text in COLOR_OPTIONS:
        user_states[user_id]["color_bg"] = COLOR_OPTIONS[text]
        user_states[user_id]["background"] = None  # –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω/—à–∞–±–ª–æ–Ω
        await update.message.reply_text(f"–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {text}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=main_keyboard())

    elif text in TEMPLATES:
        user_states[user_id]["background"] = TEMPLATES[text]
        user_states[user_id]["color_bg"] = None
        await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {text}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=main_keyboard())

    elif text == "–ù–∞–∑–∞–¥":
        user_states[user_id]["mode"] = None
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_keyboard())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_data = user_states.setdefault(user_id, {})

    file = await update.message.photo[-1].get_file()
    photo_bytes = await file.download_as_bytearray()

    # === –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ–Ω ===
    if user_data.get("mode") == "waiting_for_background":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–æ–Ω
        ext = file.file_path.split('.')[-1]
        bg_filename = f"{BG_PATH}{user_id}_bg.{ext}"
        with open(bg_filename, "wb") as f:
            f.write(photo_bytes)

        user_data["background"] = bg_filename
        user_data["color_bg"] = None
        user_data["mode"] = None

        await update.message.reply_text(
            "–§–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω.",
            reply_markup=main_keyboard()
        )
        return  # –í–´–•–û–î: —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —ç—Ç–æ —Ñ–æ–Ω

    input_image = Image.open(io.BytesIO(photo_bytes))

    # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω
    output_image = remove(input_image)

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_data = user_states.get(user_id, {})
    if "background" in user_data:
        bg_path = user_data["background"]
        bg_image = Image.open(bg_path).resize(output_image.size).convert("RGBA")
        output_image = Image.alpha_composite(bg_image, output_image.convert("RGBA"))
    else:
        # –ë–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        white_bg = Image.new("RGBA", output_image.size, (255, 255, 255, 255))
        output_image = Image.alpha_composite(white_bg, output_image.convert("RGBA"))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    result_io = io.BytesIO()
    output_image.save(result_io, format="PNG")
    result_io.seek(0)

    await update.message.reply_photo(photo=result_io, caption="–ì–æ—Ç–æ–≤–æ!", reply_markup=main_keyboard())



# === –ó–∞–ø—É—Å–∫ ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    await app.run_polling()

if __name__ == "__main__":
    os.makedirs(BG_PATH, exist_ok=True)
    os.makedirs(TEMPLATE_PATH, exist_ok=True)

    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
